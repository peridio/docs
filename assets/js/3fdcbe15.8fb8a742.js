"use strict";(self.webpackChunkparasola=self.webpackChunkparasola||[]).push([[4385],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),d=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),h=n,b=c["".concat(l,".").concat(h)]||c[h]||u[h]||r;return a?i.createElement(b,s(s({ref:t},p),{},{components:a})):i.createElement(b,s({ref:t},p))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:n,s[1]=o;for(var d=2;d<r;d++)s[d]=a[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},565:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=a(7462),n=(a(7294),a(3905));const r={},s="Binaries",o={unversionedId:"reference/binaries",id:"reference/binaries",title:"Binaries",description:"A binary represents the data you wish to distribute to devices.",source:"@site/docs/reference/binaries.md",sourceDirName:"reference",slug:"/reference/binaries",permalink:"/reference/binaries",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"Artifact Versions",permalink:"/reference/artifact-versions"},next:{title:"Binary Parts",permalink:"/reference/binary-parts"}},l={},d=[{value:"Content Versus Record",id:"content-versus-record",level:2},{value:"Targets and Compatibility",id:"targets-and-compatibility",level:2},{value:"Lifecycle",id:"lifecycle",level:2},{value:"States",id:"states",level:3},{value:"Uploadable",id:"uploadable",level:4},{value:"Hashable",id:"hashable",level:4},{value:"Hashing",id:"hashing",level:4},{value:"Signable",id:"signable",level:4},{value:"Signed",id:"signed",level:4},{value:"Destroyed",id:"destroyed",level:4},{value:"Destroyed Binaries",id:"destroyed-binaries",level:2},{value:"Impact on Releases",id:"impact-on-releases",level:3}],p={toc:d},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"binaries"},"Binaries"),(0,n.kt)("p",null,"A binary represents the data you wish to distribute to devices."),(0,n.kt)("h2",{id:"content-versus-record"},"Content Versus Record"),(0,n.kt)("p",null,"When referring to binaries there are two distinct concepts: a binary's content and a binary's record."),(0,n.kt)("p",null,"A binary's record is the meta information Peridio stores regarding a binary, e.g., its description, what artifact version it is associated with, its hash, etc. A binary's content is the literal data, e.g., a firmware image, a machine learning model, etc."),(0,n.kt)("p",null,"This distinction is important because a binary's content and record are stored independently from each other for a variety of reasons including the efficient distribution of content to devices and the efficient queryability of records. It is especially relevant to ",(0,n.kt)("a",{parentName:"p",href:"#destroyed-binaries"},"destroyed binaries"),"."),(0,n.kt)("h2",{id:"targets-and-compatibility"},"Targets and Compatibility"),(0,n.kt)("p",null,"Binaries indicate their compatibility via their ",(0,n.kt)("inlineCode",{parentName:"p"},"target")," field. The value of this field is expected to be either:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A target triplet like ",(0,n.kt)("inlineCode",{parentName:"li"},"arm-linux-androidabi"),".",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The binary in this case is said to be target-specific."))),(0,n.kt)("li",{parentName:"ol"},"The reserved value ",(0,n.kt)("inlineCode",{parentName:"li"},"portable"),".",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The binary in this case is said to be portable.")))),(0,n.kt)("p",null,"Target-specific binaries are compatible with a device if their ",(0,n.kt)("inlineCode",{parentName:"p"},"target")," field matches the device's product's ",(0,n.kt)("inlineCode",{parentName:"p"},"target")," field."),(0,n.kt)("p",null,"Portable binaries are universally compatible with all devices."),(0,n.kt)("p",null,"Note in the case of ",(0,n.kt)("a",{parentName:"p",href:"/reference/cohorts#bianry-resolution"},"binary resolution"),", if both a compatible target-specific binary and a portable binary exist for an artifact version, the target-specific binary will be preferred."),(0,n.kt)("h2",{id:"lifecycle"},"Lifecycle"),(0,n.kt)("p",null,"A binary's lifecycle is tracked and managed by its ",(0,n.kt)("inlineCode",{parentName:"p"},"state")," field."),(0,n.kt)("h3",{id:"states"},"States"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"uploadable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"hashable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"hashing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"signable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"signed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"destroyed"))),(0,n.kt)("img",{src:"/img/binary-states.png",height:"200"}),(0,n.kt)("h4",{id:"uploadable"},"Uploadable"),(0,n.kt)("p",null,"The initial state that every binary is created in. The binary is awaiting data to be uploaded via ",(0,n.kt)("a",{parentName:"p",href:"/reference/binary-parts"},"binary parts"),"."),(0,n.kt)("p",null,"If the binary storage backend has an initial step, like is typical in multipart upload scenarios, it is performed as part of this step."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"When you create a binary in the web console, it will be in the ",(0,n.kt)("inlineCode",{parentName:"p"},"uploadable")," state. Note that successful upload of a file via the web console will automatically transition the binary to the ",(0,n.kt)("inlineCode",{parentName:"p"},"hashing")," state which will eventually automatically transition to the ",(0,n.kt)("inlineCode",{parentName:"p"},"signable")," state.")),(0,n.kt)("h4",{id:"hashable"},"Hashable"),(0,n.kt)("p",null,"Use this state to indicate you have completed your upload."),(0,n.kt)("p",null,"If the binary storage backend has a final step, like is typical in multipart upload scenarios, it is performed as part of this state transition."),(0,n.kt)("h4",{id:"hashing"},"Hashing"),(0,n.kt)("p",null,"Use this state to kickoff Peridio's own verification process that computes its own hash over the data and verifies it matches the user provided hash and the hash reported"),(0,n.kt)("admonition",{title:"Automatic State Transition",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Once Peridio's verification process completes, the binary will automatically transition states from ",(0,n.kt)("inlineCode",{parentName:"p"},"hashing")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"signable"),".")),(0,n.kt)("h4",{id:"signable"},"Signable"),(0,n.kt)("p",null,"This state indicates the binary as awaiting a ",(0,n.kt)("a",{parentName:"p",href:"/reference/binary-signatures"},"signature"),"."),(0,n.kt)("admonition",{title:"Automatic State Transition",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Once a signature is attached to a signable binary, the binary will automatically transition states from ",(0,n.kt)("inlineCode",{parentName:"p"},"signable")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"signed"),".")),(0,n.kt)("h4",{id:"signed"},"Signed"),(0,n.kt)("p",null,"The binary is complete and ready to be attached to ",(0,n.kt)("a",{parentName:"p",href:"/reference/bundles"},"bundles")," and distributed via ",(0,n.kt)("a",{parentName:"p",href:"/reference/releases"},"releases"),"."),(0,n.kt)("h4",{id:"destroyed"},"Destroyed"),(0,n.kt)("p",null,"The binary has been destroyed and can no longer be attached to new bundles nor distributed via releases. See ",(0,n.kt)("a",{parentName:"p",href:"#destroyed-binaries"},"destroyed binaries"),"."),(0,n.kt)("h2",{id:"destroyed-binaries"},"Destroyed Binaries"),(0,n.kt)("p",null,"Binaries with a state of signed can be destroyed. Destroying a binary deletes its content from Peridio but leaves its record mostly intact, see ",(0,n.kt)("a",{parentName:"p",href:"#content-versus-record"},"content versus record"),"."),(0,n.kt)("admonition",{type:"danger"},(0,n.kt)("p",{parentName:"admonition"},"Destroying a binary is an irreversible and destructive action."),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"The binary's record is updated such that ",(0,n.kt)("inlineCode",{parentName:"li"},"destroyed: true, bytes_uploaded: 0"),"."),(0,n.kt)("li",{parentName:"ul"},"The binary's content is irrecoverably deleted."),(0,n.kt)("li",{parentName:"ul"},"Devices' ability to update may be interupted, see ",(0,n.kt)("a",{parentName:"li",href:"#impact-on-releases"},"impact on releases"),"."))),(0,n.kt)("h3",{id:"impact-on-releases"},"Impact on Releases"),(0,n.kt)("p",null,"A release is affected by a destroyed binary if the release is associated with a bundle that is associated with an artifact version that is associated with a destroyed binary."),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"During ",(0,n.kt)("a",{parentName:"p",href:"/reference/cohorts#update-resolution"},"update resolution"),", release resolution completes before binary resolution begins, but destroyed binaries are not valid candidates for binary resolution. This means that if release resolution resolves a release that then fails binary resolution, the requesting device will fail to resolve an update.")),(0,n.kt)("p",null,"For impacted releases, whether it causes a device to fail to resolve an update or not is dictated by:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The impacted release's ",(0,n.kt)("inlineCode",{parentName:"li"},"required")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"next_release_prn")," fields."),(0,n.kt)("li",{parentName:"ol"},"Whether the impacted artifact version has a resolveable portable binary associated with it or not. See ",(0,n.kt)("a",{parentName:"li",href:"#targets-and-compatibility"},"targets and compatibility"),".")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"To avoid disrupting update resolution, it is recommended to archive any release that would be impacted before destroying the binary. You can see a list of releases associated with a binary most conveniently by viewing the binary in the Peridio Web Console.")))}u.isMDXComponent=!0}}]);