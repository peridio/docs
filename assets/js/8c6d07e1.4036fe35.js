"use strict";(self.webpackChunkparasola=self.webpackChunkparasola||[]).push([[2639],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(r),d=o,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2390:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));r(8209);const a={},i="Update resolution",l={unversionedId:"reference/update-resolution",id:"reference/update-resolution",title:"Update resolution",description:"When a device performs the",source:"@site/docs/reference/update-resolution.md",sourceDirName:"reference",slug:"/reference/update-resolution",permalink:"/reference/update-resolution",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Release resolution",id:"release-resolution",level:2},{value:"Binary resolution",id:"binary-resolution",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"update-resolution"},"Update resolution"),(0,o.kt)("p",null,"When a device performs the\n",(0,o.kt)("a",{parentName:"p",href:"/admin-api#tag/devices/operations/get-device-update"},"get device update")," request, Peridio performs\nrelease resolution and binary resolution to determine if there is a release to update to, and to\ncreate a set of presigned URLs to facilitate the device acquiring compatible binaries."),(0,o.kt)("h2",{id:"release-resolution"},"Release resolution"),(0,o.kt)("p",null,"Release resolution is the process of determing if, given the current release of a device, there is\nanother release, referred to as the target release, the device can update to."),(0,o.kt)("p",null,"This resolution is performed as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The device reports its current release to Peridio."),(0,o.kt)("li",{parentName:"ol"},"Peridio checks if that release belongs to the cohort that the device belongs to.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If yes, go to 3."),(0,o.kt)("li",{parentName:"ol"},"If no, release resolution fails."))),(0,o.kt)("li",{parentName:"ol"},"Peridio checks if there is a next release.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If yes, go to 4."),(0,o.kt)("li",{parentName:"ol"},"If no, release resolution succeeds with no target release. The device is up to date."))),(0,o.kt)("li",{parentName:"ol"},"Peridio checks if the release is required.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If yes, release resolution succeeds with a target release."),(0,o.kt)("li",{parentName:"ol"},"If no, go to 5."))),(0,o.kt)("li",{parentName:"ol"},"Peridio checks if there is a next release.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If yes, go to 4."),(0,o.kt)("li",{parentName:"ol"},"If no, release resolution succeeds with a target release.")))),(0,o.kt)("p",null,"Peridio will recurse between 5.1 and 4 to skip as many not-required releases as possible."),(0,o.kt)("h2",{id:"binary-resolution"},"Binary resolution"),(0,o.kt)("p",null,"In the case that release resolution succeeds with a target release, binary resolution is then\nperformed. Binary resolution is the process of looking at the target release's\n",(0,o.kt)("a",{parentName:"p",href:"/reference/bundles"},"bundle"),", and then, for each of the bundle's\n",(0,o.kt)("a",{parentName:"p",href:"/reference/artifact-versions"},"artifact versions"),", resolving a\n",(0,o.kt)("a",{parentName:"p",href:"/reference/binaries#compatibility"},"compatible binary"),". If no compatible binary is found for\nany one or more of the artifact versions, binary resolution fails and the device will not be able\nto proceed."))}u.isMDXComponent=!0},8209:(e,t,r)=>{r(7294)}}]);