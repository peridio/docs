"use strict";(self.webpackChunkparasola=self.webpackChunkparasola||[]).push([[437],{91495:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>s});var o=i(74848),r=i(28453);const t={},d="Yocto",a={id:"integration/linux/build-tools/yocto",title:"Yocto",description:"Peridio provides a yocto layer meta-peridio that can be used to include peridiod and its dependencies into your system.",source:"@site/docs/integration/linux/build-tools/yocto.md",sourceDirName:"integration/linux/build-tools",slug:"/integration/linux/build-tools/yocto",permalink:"/integration/linux/build-tools/yocto",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"integration",previous:{title:"peridiod",permalink:"/integration/linux/peridiod"},next:{title:"Buildroot",permalink:"/integration/linux/build-tools/buildroot"}},c={},s=[{value:"Extending a reference design",id:"extending-a-reference-design",level:2},{value:"Checkout the source",id:"checkout-the-source",level:3},{value:"Customizing a machine",id:"customizing-a-machine",level:3},{value:"Building FWUP archives",id:"building-fwup-archives",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"yocto",children:"Yocto"}),"\n",(0,o.jsxs)(n.p,{children:["Peridio provides a yocto layer ",(0,o.jsx)(n.code,{children:"meta-peridio"})," that can be used to include peridiod and its dependencies into your system."]}),"\n",(0,o.jsxs)(n.p,{children:["The source code for the ",(0,o.jsx)(n.code,{children:"meta-peridio"})," layer is available on ",(0,o.jsx)(n.a,{href:"https://github.com/peridio/meta-peridio",children:"GitHub"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"extending-a-reference-design",children:"Extending a reference design"}),"\n",(0,o.jsxs)(n.p,{children:["The reference designs can be extended to act as platform that you can build and deploy your application. To begin, you will need to have a firm understanding of creating a custom layer to hold your Yocto customizations. More information can be found in the ",(0,o.jsx)(n.a,{href:"https://docs.yoctoproject.org/dev/dev-manual/layers.html",children:"Yocto layer documentation"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"checkout-the-source",children:"Checkout the source"}),"\n",(0,o.jsxs)(n.p,{children:["Create a working directory in this example we will be building for the ",(0,o.jsx)(n.code,{children:"qemuarm64-secureboot"})," reference design."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir build-avocado-qemuarm64 && cd build-avocado-qemuarm64\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Checkout the ",(0,o.jsx)(n.code,{children:"meta-avocado"})," project to your build directory"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone git@github.com:peridio/meta-avocado\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customizing-a-machine",children:"Customizing a machine"}),"\n",(0,o.jsx)(n.p,{children:"In your custom layer you will need to define a new machine or override an existing machine."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"meta-my-layer\n\u251c\u2500\u2500 conf\n\u2502   \u251c\u2500\u2500 layer.conf\n\u2502   \u2514\u2500\u2500 peridio\n\u2502       \u2514\u2500\u2500 my-machine.fwup.conf\n\u2514\u2500\u2500 recipes-peridio\n    \u2514\u2500\u2500 peridiod\n        \u251c\u2500\u2500 peridiod\n        \u2502\xa0\xa0 \u251c\u2500\u2500 files\n        \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 peridiod.conf\n        \u2502\xa0\xa0 \u251c\u2500\u2500 my-machine\n        \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 peridio.json\n        \u2514\u2500\u2500 peridiod_%.bbappend\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You will append a configuration to the ",(0,o.jsx)(n.code,{children:"peridiod"})," to include your custom configuration"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bitbake",metastring:'title="recipes-peridio/peridiod/peridiod.bbappends"',children:'FILESEXTRAPATHS:prepend := "${THISDIR}/${PN}:"\n\nSRC_URI += " \\\n  file://peridio.json \\\n  file://peridiod.conf \\\n"\n\nFILES:${PN} += " \\\n  ${sysconfdir}/peridiod/peridio.json \\\n  ${systemd_unitdir}/system.conf.d/peridiod.conf \\\n"\n\ndo_install:append() {\n  install -D -m 644 ${WORKDIR}/peridio.json \\\n    ${D}/${sysconfdir}/peridiod\n\n  install -D -m 644 ${WORKDIR}/peridiod.conf \\\n    ${D}${systemd_unitdir}/system.conf.d/peridiod.conf\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Peridio offers an example on the structure of a custom layer in the ",(0,o.jsxs)(n.a,{href:"https://github.com/peridio/meta-avocado/tree/main/meta-avocado-example",children:[(0,o.jsx)(n.code,{children:"meta-avocado-example"})," layer"]}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Ensure you add ",(0,o.jsx)(n.code,{children:"peridiod"})," to your recipes. If you are integrating with the ",(0,o.jsx)(n.code,{children:"kas"})," build tooling, the ",(0,o.jsx)(n.code,{children:"meta-peridio"})," layer offers a ",(0,o.jsx)(n.a,{href:"https://github.com/peridio/meta-peridio/blob/kirkstone/conf/kas/peridio-include.yml",children:"helpful include fragment"})," you can use to pull in yocto build dependencies. In your ",(0,o.jsx)(n.code,{children:"kas"})," config yaml file, include the meta-peridio layer and include the ",(0,o.jsx)(n.code,{children:"peridio-includes"})," from the repo. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"header:\n  version: 11\n  includes:\n    - repo: meta-peridio\n      file: conf/kas/peridio-include.yml\n\nrepos:\n\n  meta-peridio:\n    url: https://github.com/peridio/meta-peridio.git\n    branch: kirkstone\n    commit: 3c7cb6a536f440218765a51d9b588f853569caeb\n    layers:\n      .:\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"building-fwup-archives",children:"Building FWUP archives"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"meta-peridio"})," layer includes helpful image type classes to build fwup archives and ",(0,o.jsx)(n.code,{children:"fwup-img"})," raw image file formats. These image classes will preset common variables to sane defaults which can be used in your fwup configuration file. This image class can be added to your ",(0,o.jsx)(n.code,{children:"IMAGE_CLASSES"})," list in your custom yocto layer."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'IMAGE_CLASSES += "image_types_fwup"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The following are variables the image class defines that can be overridden in ",(0,o.jsx)(n.code,{children:"local.conf"})," of from the command line / kas configuration scripts:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Firmware metadata\nPERIDIO_META_AUTHOR ??= "${MAINTAINER}"\nPERIDIO_META_PRODUCT ??= "${DISTRO}"\nPERIDIO_META_VERSION ??= "${DISTRO_VERSION}"\nPERIDIO_META_DESCRIPTION ??= "${DISTRO_NAME}"\nPERIDIO_META_ARCHITECTURE ??= "${TARGET_ARCH}-${ABIEXTENSION}"\nPERIDIO_META_PLATFORM ??= "${MACHINE}"\n\n# Device Disk Information\nPERIDIO_DISK_DEVPATH ??= "/dev/mmcblk0"\nPERIDIO_DISK_BLOCK_SIZE ??= "512"\n\n# Location for the U-Boot environment used to store peridiod data\nPERIDIO_UBOOT_ENV_OFFSET ??= "2048"\nPERIDIO_UBOOT_ENV_COUNT ??= "256"\n\n# Disk boot partition structure\nPERIDIO_BOOTFS_TYPE ??= "fat"\nPERIDIO_BOOTFS_OFFSET_BLOCKS ??= "4096"\nPERIDIO_BOOTFS_SIZE_MB ??= "16"\n\n# Disk root fs partition structure\nPERIDIO_ROOTFS_TYPE ??= "squashfs"\nPERIDIO_ROOTFS_OFFSET_BLOCKS ??= "65536"\nPERIDIO_ROOTFS_SIZE_MB ??= "256"\n\n# Disk data (read-write) partition structure\nPERIDIO_DATAFS_TYPE ??= "f2fs"\nPERIDIO_DATAFS_OFFSET_BLOCKS ??= "1310720"\nPERIDIO_DATAFS_SIZE_MB ??= "512"\n\n# Disk /dev paths\nPERIDIO_BOOT_PART_DEVPATH ??= "${PERIDIO_DISK_DEVPATH}p1"\nPERIDIO_BOOT_PART_TYPE ??= "${PERIDIO_BOOTFS_TYPE}"\n\nPERIDIO_ROOTFS_A_PART_DEVPATH ??= "${PERIDIO_DISK_DEVPATH}p2"\nPERIDIO_ROOTFS_A_PART_TYPE ??= "${PERIDIO_ROOTFS_TYPE}"\nPERIDIO_ROOTFS_A_PART_OFFSET_BLOCKS ??= "${PERIDIO_ROOTFS_OFFSET_BLOCKS}"\n\nPERIDIO_ROOTFS_B_PART_DEVPATH ??= "${PERIDIO_DISK_DEVPATH}p3"\nPERIDIO_ROOTFS_B_PART_TYPE ??= "${PERIDIO_ROOTFS_TYPE}"\n\nPERIDIO_DATAFS_PART_DEVPATH ??= "${PERIDIO_DISK_DEVPATH}p4"\nPERIDIO_DATAFS_PART_TYPE ??= "${PERIDIO_DATAFS_TYPE}"\nPERIDIO_DATAFS_PART_MOUNTPOINT ??= "/data"\n\n# Yocto output directory references\nPERIDIO_ROOTFS_FILE ??= "${IMAGE_NAME}.rootfs.${PERIDIO_ROOTFS_TYPE}"\nPERIDIO_HOST_ROOTFS_DIR ??= "${IMGDEPLOYDIR}"\nPERIDIO_HOST_IMAGE_DIR ??= "${DEPLOY_DIR_IMAGE}"\n\nFWUP_OUTPUT_NAME ??= "${IMAGE_BASENAME}-${MACHINE}"\nFWUP_IMG_TASK ??= "complete"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["An example of how these values are used in an fwup configuration can be found in the ",(0,o.jsx)(n.a,{href:"https://github.com/peridio/meta-avocado/blob/main/meta-avocado-arm/conf/peridio/qemu.fwup.conf",children:"QEmu reference repo"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Yocto can produce fwup archive and ",(0,o.jsx)(n.code,{children:"fwup-img"})," raw image by adding them to ",(0,o.jsx)(n.code,{children:"IMAGE_FSTYPES"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'IMAGE_FSTYPES += "fwup"\nIMAGE_FSTYPES += "fwup-img"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var o=i(96540);const r={},t=o.createContext(r);function d(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);