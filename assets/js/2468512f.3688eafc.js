"use strict";(self.webpackChunkperidio_docs=self.webpackChunkperidio_docs||[]).push([[9021],{95025:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>f});var n=r(74848),a=r(28453);const i={},s="Artifacts",o={id:"platform/reference/artifacts",title:"Artifacts",description:"Artifacts define a type for your binaries.",source:"@site/docs/platform/reference/artifacts.md",sourceDirName:"platform/reference",slug:"/platform/reference/artifacts",permalink:"/platform/reference/artifacts",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"platform",previous:{title:"Users",permalink:"/platform/reference/users"},next:{title:"Artifact versions",permalink:"/platform/reference/artifact-versions"}},c={},f=[{value:"Immutable reference",id:"immutable-reference",level:2}];function l(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"artifacts",children:"Artifacts"}),"\n",(0,n.jsxs)(t.p,{children:["Artifacts define a type for your ",(0,n.jsx)(t.a,{href:"binaries",children:"binaries"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Artifacts can represent anything: a machine learning model, a Linux kernal, a file system, a piece of media, a black box, etc."}),"\n",(0,n.jsxs)(t.p,{children:['For example, you may create an artifact "ML-Model". Within that artifact you would create ',(0,n.jsx)(t.a,{href:"artifact-versions",children:"artifact versions"}),". Within versions you would create binaries."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["For field-level information and requirements, see the Admin API's ",(0,n.jsx)(t.a,{href:"/admin-api#artifacts/operation/create-an-artifact",children:"create-an-artifact"})," endpoint."]})}),"\n",(0,n.jsx)(t.h2,{id:"immutable-reference",children:"Immutable reference"}),"\n",(0,n.jsx)(t.p,{children:"Artifacts act as an immutable reference to a type of binary that remains consistent before and after any version or binaries are created for it. This enables code to perform different actions based on the type of binary."}),"\n",(0,n.jsxs)(t.p,{children:["For example, your bundles may typically contain your base firmware image and a machine learning model. A device performing a Device API ",(0,n.jsx)(t.a,{href:"/device-api#devices/operation/get-update",children:"get-update"})," request could distinguish between the two binaries by observing the artifact PRNs reported alongside the binaries in the response's manifest."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var n=r(96540);const a={},i=n.createContext(a);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);