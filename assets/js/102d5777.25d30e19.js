"use strict";(self.webpackChunkparasola=self.webpackChunkparasola||[]).push([[1583],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),f=i,g=l["".concat(c,".").concat(f)]||l[f]||y[f]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const a={},o=void 0,s={unversionedId:"cli/binary-signatures/create",id:"cli/binary-signatures/create",title:"create",description:"",source:"@site/docs/cli/binary-signatures/create.md",sourceDirName:"cli/binary-signatures",slug:"/cli/binary-signatures/create",permalink:"/cli/binary-signatures/create",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"cli",previous:{title:"list",permalink:"/cli/binary-parts/list"},next:{title:"delete",permalink:"/cli/binary-signatures/delete"}},c={},p=[],u={toc:p},l="wrapper";function y(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Usage: peridio binary-signatures create [OPTIONS] --binary-prn <BINARY_PRN>\n\nOptions:\n  -b, --binary-prn <BINARY_PRN>\n          The PRN of the binary to create a binary signature for\n\n  -c, --binary-content-path <BINARY_CONTENT_PATH>\n          The path of the file to automatically create a signature for. If you instead want to compute and provide the signature yourself, use the --signature option\n\n  -g, --signature <SIGNATURE>\n          The signature of the binary content.\n          \n          The hex encoded Ed25519 signature of the SHA256 hash of the binary content. To avoid computing this yourself, you can use the --binary-content-path option.\n\n  -s, --signing-key-pair <SIGNING_KEY_PAIR>\n          The name of a signing key pair as defined in your Peridio CLI config.\n          \n          If you instead want to provide the private key and PRN of the signing key yourself, use the --signing-key-private and --signing-key-prn options.\n\n      --signing-key-private <SIGNING_KEY_PRIVATE>\n          The path of the file containing the private key to sign the binary with.\n          \n          If you instead want to provide the name of a signing key pair as defined in your Peridio CLI config, use the --signing-key-pair option.\n\n      --signing-key-prn <SIGNING_KEY_PRN>\n          The PRN of the signing key to tell Peridio to verify the signature with.\n          \n          If you instead want to provide the name of a signing key pair as defined in your Peridio CLI config, use the --signing-key-pair option.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n")))}y.isMDXComponent=!0}}]);