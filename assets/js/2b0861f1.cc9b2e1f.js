"use strict";(self.webpackChunkparasola=self.webpackChunkparasola||[]).push([[492],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>d});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(r),y=i,d=u["".concat(p,".").concat(y)]||u[y]||f[y]||a;return r?t.createElement(d,o(o({ref:n},s),{},{components:r})):t.createElement(d,o({ref:n},s))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=y;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},9946:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=r(7462),i=(r(7294),r(3905));const a={},o=void 0,c={unversionedId:"cli/binaries/create",id:"cli/binaries/create",title:"create",description:"",source:"@site/docs/cli/binaries/create.md",sourceDirName:"cli/binaries",slug:"/cli/binaries/create",permalink:"/cli/binaries/create",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"cli",previous:{title:"update",permalink:"/cli/artifacts/update"},next:{title:"get",permalink:"/cli/binaries/get"}},p={},l=[],s={toc:l},u="wrapper";function f(e){let{components:n,...r}=e;return(0,i.kt)(u,(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Usage: peridio binaries create [OPTIONS] --artifact-version-prn <ARTIFACT_VERSION_PRN> --target <TARGET>\n\nOptions:\n      --artifact-version-prn <ARTIFACT_VERSION_PRN>\n          \n      --description <DESCRIPTION>\n          \n      --hash <HASH>\n          \n      --size <SIZE>\n          \n      --target <TARGET>\n          \n      --content-path <CONTENT_PATH>\n          \n      --binary-part-size <BINARY_PART_SIZE>\n          [default: 5242880]\n      --concurrency <CONCURRENCY>\n          \n  -s, --signing-key-pair <SIGNING_KEY_PAIR>\n          The name of a signing key pair as defined in your Peridio CLI config.\n      --signing-key-private <SIGNING_KEY_PRIVATE>\n          The PEM base64-encoded PKCS #8 private key.\n      --signing-key-prn <SIGNING_KEY_PRN>\n          The PRN of the signing key to tell Peridio to verify the signature with.\n      --skip-upload\n          \n  -h, --help\n          Print help\n\n")))}f.isMDXComponent=!0}}]);