"use strict";(self.webpackChunkperidio_docs=self.webpackChunkperidio_docs||[]).push([[598],{60574:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(74848),t=n(28453);const o={},s="Overview",a={id:"integration/linux/reference-designs/raspberrypi4/overview",title:"Overview",description:"Getting started",source:"@site/docs/integration/linux/reference-designs/raspberrypi4/overview.md",sourceDirName:"integration/linux/reference-designs/raspberrypi4",slug:"/integration/linux/reference-designs/raspberrypi4/overview",permalink:"/integration/linux/reference-designs/raspberrypi4/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"integration",previous:{title:"Overview",permalink:"/integration/linux/reference-designs/raspberrypi3/overview"},next:{title:"Overview",permalink:"/integration/linux/reference-designs/raspberrypi5/overview"}},d={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Generate device identity",id:"generate-device-identity",level:4},{value:"Create working directory",id:"create-working-directory",level:4},{value:"Build the system",id:"build-the-system",level:3},{value:"Testing",id:"testing",level:2}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(i.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,r.jsx)(i.p,{children:"This guide depends on the following requirements:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/integration/linux/overview#peridio-cloud-requirements",children:"Peridio Cloud Configuration"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/integration/linux/overview#development-machine-requirements",children:"Peridio CLI Development Machine"})}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(i.h4,{id:"generate-device-identity",children:"Generate device identity"}),"\n",(0,r.jsxs)(i.p,{children:["Export the environment variables ",(0,r.jsx)(i.code,{children:"PERIDIO_CERTIFICATE_FILE"})," and ",(0,r.jsx)(i.code,{children:"PERIDIO_PRIVATE_KEY_FILE"})," to the location of the PEM files generated when configuring your signing PKI. For more information about device signing PKI, see ",(0,r.jsx)(i.a,{href:"/platform/guides/creating-x509-certificates-with-openssl",children:"creating CA certificates"}),"."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"export PERIDIO_CERTIFICATE_FILE=/path/to/end-entity-certificate.pem\nexport PERIDIO_PRIVATE_KEY_FILE=/path/to/end-entity-private-key.pem\n"})}),"\n",(0,r.jsx)(i.h4,{id:"create-working-directory",children:"Create working directory"}),"\n",(0,r.jsxs)(i.p,{children:["Create a working directory for building the ",(0,r.jsx)(i.code,{children:"raspberrypi4-64"})," machine."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"mkdir build-avocado-raspberrypi4-64 && cd build-avocado-raspberrypi4-64\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Checkout the ",(0,r.jsx)(i.code,{children:"meta-avocado"})," project to your build directory"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"git clone git@github.com:peridio/meta-avocado\n"})}),"\n",(0,r.jsx)(i.h3,{id:"build-the-system",children:"Build the system"}),"\n",(0,r.jsx)(i.p,{children:"You can build the project using kas. The product will have the device identity included as part of the runtime environment. Building this system may take a long time to complete depending on your build machine resources."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"kas build --update meta-avocado/meta-avocado-example/conf/kas/machine/raspberrypi4-64.yml\n"})}),"\n",(0,r.jsx)(i.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(i.p,{children:"Insert a microSD card and execute the following command to write the image:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"fwup build/tmp/deploy/images/raspberrypi4-64/avocado-image-base-raspberrypi4-64.fw\n"})}),"\n",(0,r.jsx)(i.p,{children:"Connect a serial console cable to the UART pins on the Raspberry Pi header"}),"\n",(0,r.jsx)("img",{src:"/img/integration/linux/reference-designs/raspberry-pi-serial-cable-connection.png"}),"\n",(0,r.jsx)(i.p,{children:"Insert the microSD card and power on the board."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var r=n(96540);const t={},o=r.createContext(t);function s(e){const i=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:i},e.children)}}}]);