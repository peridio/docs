"use strict";(self.webpackChunkperidio_docs=self.webpackChunkperidio_docs||[]).push([[9762],{30329:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=n(74848),a=n(28453);const s={},r="Binaries",d={id:"platform/reference/binaries",title:"Binaries",description:"Binaries record the content you wish to distribute to devices.",source:"@site/docs/platform/reference/binaries.md",sourceDirName:"platform/reference",slug:"/platform/reference/binaries",permalink:"/platform/reference/binaries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"platform",previous:{title:"Artifact Versions",permalink:"/platform/reference/artifact-versions"},next:{title:"Binary Parts",permalink:"/platform/reference/binary-parts"}},o={},l=[{value:"Content Versus Record",id:"content-versus-record",level:2},{value:"Targets and Compatibility",id:"targets-and-compatibility",level:2},{value:"Lifecycle",id:"lifecycle",level:2},{value:"States",id:"states",level:3},{value:"Uploadable",id:"uploadable",level:4},{value:"Hashable",id:"hashable",level:4},{value:"Hashing",id:"hashing",level:4},{value:"Signable",id:"signable",level:4},{value:"Signed",id:"signed",level:4},{value:"Destroyed",id:"destroyed",level:4},{value:"Resetting Binaries",id:"resetting-binaries",level:3},{value:"Destroyed Binaries",id:"destroyed-binaries",level:2},{value:"Impact on Releases",id:"impact-on-releases",level:3}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"binaries",children:"Binaries"}),"\n",(0,t.jsx)(i.p,{children:"Binaries record the content you wish to distribute to devices."}),"\n",(0,t.jsxs)(i.p,{children:["Once you've created an ",(0,t.jsx)(i.a,{href:"artifact-versions",children:"artifact version"}),", you can create binaries for it."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["For field-level information and requirements, see the Admin API's ",(0,t.jsx)(i.a,{href:"/admin-api#binaries/operation/create-a-binary",children:"create-a-binary"})," endpoint."]})}),"\n",(0,t.jsx)(i.h2,{id:"content-versus-record",children:"Content Versus Record"}),"\n",(0,t.jsx)(i.p,{children:"When referring to binaries there are two distinct concepts: a binary's content and a binary's record."}),"\n",(0,t.jsx)(i.p,{children:"A binary's record is the meta information Peridio stores regarding a binary, e.g., its description, what artifact version it is associated with, its hash, etc. A binary's content is the literal data, e.g., a firmware image, a machine learning model, etc."}),"\n",(0,t.jsxs)(i.p,{children:["This distinction is important because a binary's content and record are stored independently from each other for a variety of reasons including the efficient distribution of content to devices and the efficient queryability of records. It is especially relevant to ",(0,t.jsx)(i.a,{href:"#destroyed-binaries",children:"destroyed binaries"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"targets-and-compatibility",children:"Targets and Compatibility"}),"\n",(0,t.jsxs)(i.p,{children:["Binaries may indicate their intended compatibility via their ",(0,t.jsx)(i.code,{children:"target"})," field. The value of this field is expected to be a target triplet like ",(0,t.jsx)(i.code,{children:"arm-linux-androidabi"}),"."]}),"\n",(0,t.jsxs)(i.admonition,{title:"Artifact Versions",type:"info",children:[(0,t.jsx)(i.p,{children:"An artifact version can have zero to many binaries associated with it as long as each binary has a unique target."}),(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"#destroyed-binaries",children:"Destroyed binaries"})," do not count towards this conflict."]})]}),"\n",(0,t.jsx)(i.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,t.jsxs)(i.p,{children:["A binary's lifecycle is tracked and managed by its ",(0,t.jsx)(i.code,{children:"state"})," field."]}),"\n",(0,t.jsx)(i.h3,{id:"states",children:"States"}),"\n",(0,t.jsx)(i.p,{children:"A binary's possible states include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Uploadable"}),"\n",(0,t.jsx)(i.li,{children:"Hashable"}),"\n",(0,t.jsx)(i.li,{children:"Hashing"}),"\n",(0,t.jsx)(i.li,{children:"Signable"}),"\n",(0,t.jsx)(i.li,{children:"Signed"}),"\n",(0,t.jsx)(i.li,{children:"Destroyed"}),"\n"]}),"\n",(0,t.jsx)("img",{src:"/img/lifecycle.png",width:"600"}),"\n",(0,t.jsx)(i.h4,{id:"uploadable",children:"Uploadable"}),"\n",(0,t.jsxs)(i.p,{children:["The initial state that every binary is created in. The binary is awaiting data to be uploaded via ",(0,t.jsx)(i.a,{href:"/platform/reference/binary-parts",children:"binary parts"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"If the binary storage backend has an initial step, like is typical in multipart upload scenarios, it is performed as part of this step."}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["When you create a binary in the web console, it will be in the ",(0,t.jsx)(i.code,{children:"uploadable"})," state. Note that successful upload of a file via the web console will automatically transition the binary to the ",(0,t.jsx)(i.code,{children:"hashing"})," state which will eventually automatically transition to the ",(0,t.jsx)(i.code,{children:"signable"})," state."]})}),"\n",(0,t.jsx)(i.h4,{id:"hashable",children:"Hashable"}),"\n",(0,t.jsx)(i.p,{children:"Use this state to indicate you have completed your upload."}),"\n",(0,t.jsx)(i.p,{children:"If the binary storage backend has a final step, like is typical in multipart upload scenarios, it is performed as part of this state transition."}),"\n",(0,t.jsx)(i.h4,{id:"hashing",children:"Hashing"}),"\n",(0,t.jsx)(i.p,{children:"Use this state to kickoff Peridio's own verification process that computes its own hash over the data and verifies it matches the user provided hash and the hash reported"}),"\n",(0,t.jsx)(i.admonition,{title:"Automatic State Transition",type:"info",children:(0,t.jsxs)(i.p,{children:["Once Peridio's verification process completes, the binary will automatically transition states from ",(0,t.jsx)(i.code,{children:"hashing"})," to ",(0,t.jsx)(i.code,{children:"signable"}),"."]})}),"\n",(0,t.jsx)(i.h4,{id:"signable",children:"Signable"}),"\n",(0,t.jsxs)(i.p,{children:["This state indicates the binary as awaiting a ",(0,t.jsx)(i.a,{href:"/platform/reference/binary-signatures",children:"signature"}),"."]}),"\n",(0,t.jsx)(i.admonition,{title:"Automatic State Transition",type:"info",children:(0,t.jsxs)(i.p,{children:["Once a signature is attached to a signable binary, the binary will automatically transition states from ",(0,t.jsx)(i.code,{children:"signable"})," to ",(0,t.jsx)(i.code,{children:"signed"}),"."]})}),"\n",(0,t.jsx)(i.h4,{id:"signed",children:"Signed"}),"\n",(0,t.jsxs)(i.p,{children:["The binary is complete and ready to be attached to ",(0,t.jsx)(i.a,{href:"/platform/reference/bundles",children:"bundles"})," and distributed via ",(0,t.jsx)(i.a,{href:"/platform/reference/releases",children:"releases"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"destroyed",children:"Destroyed"}),"\n",(0,t.jsxs)(i.p,{children:["The binary has been destroyed and can no longer be attached to new bundles nor distributed via releases. See ",(0,t.jsx)(i.a,{href:"#destroyed-binaries",children:"destroyed binaries"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"resetting-binaries",children:"Resetting Binaries"}),"\n",(0,t.jsxs)(i.p,{children:["Hashable, hashing, and signable binaries can be reset to the uploadable state. This is achieved with an Admin API ",(0,t.jsx)(i.a,{href:"/admin-api#binaries/operation/update-a-binary",children:"update-a-binary"})," request that sets the state to uploadable. Doing this will delete associated binary parts and a new attempt at uploading may be made."]}),"\n",(0,t.jsx)(i.h2,{id:"destroyed-binaries",children:"Destroyed Binaries"}),"\n",(0,t.jsxs)(i.p,{children:["Binaries with a state of signed can be destroyed. Destroying a binary deletes its content from Peridio and alters its record, to understand the difference between the two see ",(0,t.jsx)(i.a,{href:"#content-versus-record",children:"content versus record"}),"."]}),"\n",(0,t.jsxs)(i.admonition,{type:"danger",children:[(0,t.jsx)(i.p,{children:"Destroying a binary is an irreversible and destructive action."}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The binary's record is updated such that ",(0,t.jsx)(i.code,{children:"destroyed: true, bytes_uploaded: 0"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"The binary's content is irrecoverably deleted."}),"\n",(0,t.jsxs)(i.li,{children:["Devices' ability to update may be interupted, see ",(0,t.jsx)(i.a,{href:"#impact-on-releases",children:"impact on releases"}),"."]}),"\n"]})]}),"\n",(0,t.jsx)(i.h3,{id:"impact-on-releases",children:"Impact on Releases"}),"\n",(0,t.jsx)(i.p,{children:"A release is affected by a destroyed binary if the release is associated with a bundle that is associated with an artifact version that is associated with a destroyed binary."}),"\n",(0,t.jsx)(i.admonition,{type:"caution",children:(0,t.jsx)(i.p,{children:"Affected releases will not serve updates to devices which can cause devices to be be unable to update if the release is also required."})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsx)(i.p,{children:"To avoid disrupting device updates, it is recommended to archive any release that would be impacted before destroying the binary. You can see a list of releases associated with a binary most conveniently by viewing the binary in the Peridio Web Console."})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>d});var t=n(96540);const a={},s=t.createContext(a);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);