"use strict";(self.webpackChunkperidio_docs=self.webpackChunkperidio_docs||[]).push([[1721],{14108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(74848),i=t(28453);const a={},s=void 0,o={id:"cli/binary-parts/create",title:"create",description:"",source:"@site/docs/cli/binary-parts/create.md",sourceDirName:"cli/binary-parts",slug:"/cli/binary-parts/create",permalink:"/cli/binary-parts/create",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"cli",previous:{title:"update",permalink:"/cli/binaries/update"},next:{title:"list",permalink:"/cli/binary-parts/list"}},c={},p=[];function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Create a binary part.\n\nBinary parts track the chunks of a multipart upload to Peridio.\n\nUsage: peridio binary-parts create [OPTIONS] --binary-prn <BINARY_PRN> --hash <HASH> --index <INDEX> --size <SIZE>\n\nOptions:\n      --binary-prn <BINARY_PRN>\n          The PRN of the binary you wish to create a part for\n\n      --expected-binary-size <EXPECTED_BINARY_SIZE>\n          The total size of the binary's content\n\n      --hash <HASH>\n          The base64 encoding of the SHA256 hash of the binary part's data\n\n      --index <INDEX>\n          Uniquely identifies a binary part and defines its position within the binary being created. Can be any number from 1 to 10,000, inclusive. If you create a binary part using the same index that was used with a previous binary part, the previously uploaded binary part is overwritten\n\n      --size <SIZE>\n          The size in bytes of the binary part\n\n      --binary-content-path <BINARY_CONTENT_PATH>\n          The path to the file you wish to upload as the binary's content\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n"})})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);