openapi: 3.1.0
info:
  title: Peridio Admin API
  version: v1
  license:
    name: Peridio
    url: https://github.com/peridio/parasola/blob/main/LICENSE
  description: >
    # Expanding Responses


    Some endpoints are able to return more data than they normally do by
    expanding their response.

    When this is possible the endpoint will specify the `expand` field and will
    document which

    fields can be expanded. The `expand` field takes an array of string field
    names that identify

    which fields you wish to expand.


    For example:


    ```text

    /foo?expand[]=bar&expand[]=baz

    ```


    # Search Query Language


    Some endpoints specify a `search` parameter. The value of this parameter
    must be a string that

    contains a valid query as defined by this search query language.


    ## Queries


    A query consists of at least one and at most five clauses joined by the
    `and` keyword.


    For example:


    ```text

    inserted_at>='2023-01-01T00:00:00Z' and description~'east blue'

    ```


    ## Clauses


    A clause consists of a key, an operator, and a value.


    For example:


    ```text

    inserted_at>='2023-01-01T00:00:00Z'

    ```


    ## Keys


    When performing a search, the set of valid keys is defined by the relevant
    endpoint's `search`

    parameter's documentation.


    ## Operators


    Each key an endpoint specifies as searchable will be associated with a set
    of operators that

    are valid to use with it. Below are all possible operators and their
    associated operation:


    |Keyword|Operation|

    |-|-|

    |`:`|equals (case-sensitive)|

    |`-`|substring (case-insensitive)|

    |`~`|substring (case-sensitive)|

    |`<`|less than|

    |`<=`|less than or equal to|

    |`>`|greater than|

    |`>=`|greater than or equal to|


    ## Values


    Each key will specify which type of value it acepts.


    ### String


    You must use single quotes when supplying a string. You can escape single
    quotes inside of

    single quotes with a backslash (`\`).


    For example:


    ```text

    summary~'zoro\'s three sword style'

    ```


    ### Boolean


    Boolean values are supplied either `true` or `false` without single quotes.


    For example:


    ```text

    purged:true

    ```


    ### Date-Time


    You must use single quotes when supplying a date-time and you must use the
    following

    representation: `'[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS]Z'`. The timezone is always
    UTC.


    For example:


    ```text

    inserted_at:'2023-01-01T00:00:00Z'

    ```


    ### Numeric


    Numeric values are supplied as-is without single quotes.


    For example:


    ```text

    berries:100000000

    ```
servers:
  - url: https://api.cremini.peridio.com
security:
  - api_key: []
tags:
  - name: Deployments
    id: deployments
    description: >-
      This functionality has been superceded by [bundles](#bundles) and
      [releases](#releases).
  - name: Bundles
    id: bundles
  - name: Organization Users
    id: organization-users
  - name: Product Users
    id: product-users
  - name: Users
    id: users
  - name: Artifacts
    id: artifacts
  - name: Artifact Versions
    id: artifact-versions
  - name: Binaries
    id: binaries
  - name: Keys
    id: keys
    description: Use [signing keys](#signing-keys) instead.
  - name: Signing Keys
    id: signing-keys
  - name: Firmware
    id: firmware
    description: >-
      This functionality has been superceded by [artifacts](#artifacts),
      [artifact versions](#artifact-versions), and [binaries](#binaries).
  - name: CA Certificates
    id: ca-certificates
  - name: Cohorts
    id: cohorts
  - name: Device Certificates
    id: device-certificates
  - name: Devices
    id: devices
  - name: Products
    id: products
  - name: Bundles
    id: bundles
  - name: Releases
    id: releases
x-tagGroups:
  - name: Account Management
    tags:
      - Organization Users
      - Product Users
      - Users
  - name: Asset Management
    tags:
      - Artifacts
      - Artifact Versions
      - Binaries
      - Keys
      - Signing Keys
      - Firmware
  - name: Device Management
    tags:
      - CA Certificates
      - Cohorts
      - Device Certificates
      - Devices
      - Products
  - name: Release Management
    tags:
      - Bundles
      - Deployments
      - Releases
paths:
  /artifacts:
    post:
      operationId: create-an-artifact
      summary: Create an artifact
      tags:
        - Artifacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/artifact-description'
                name:
                  $ref: '#/components/schemas/artifact-name'
                organization_prn:
                  $ref: '#/components/schemas/prn'
              required:
                - organization_prn
                - name
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact:
                    $ref: '#/components/schemas/artifact'
    get:
      operationId: list-artifacts
      summary: List artifacts
      tags:
        - Artifacts
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifacts:
                    $ref: '#/components/schemas/array-of-artifacts'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /artifacts/{artifact_prn}:
    get:
      operationId: retrieve-an-artifact
      summary: Retrieve an artifact
      tags:
        - Artifacts
      parameters:
        - name: artifact_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact:
                    $ref: '#/components/schemas/artifact'
    patch:
      operationId: update-an-artifact
      summary: Update an artifact
      tags:
        - Artifacts
      parameters:
        - name: artifact_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/artifact-description'
                name:
                  $ref: '#/components/schemas/artifact-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact:
                    $ref: '#/components/schemas/artifact'
  /artifact-versions:
    post:
      operationId: create-an-artifact-version
      summary: Create an artifact version
      tags:
        - Artifact Versions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                artifact_prn:
                  $ref: '#/components/schemas/prn'
                description:
                  $ref: '#/components/schemas/artifact-version-description'
                version:
                  $ref: '#/components/schemas/artifact-version-version'
              required:
                - artifact_prn
                - version
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact_version:
                    $ref: '#/components/schemas/artifact-version'
    get:
      operationId: list-artifact-versions
      summary: List artifact versions
      tags:
        - Artifact Versions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact_versions:
                    $ref: '#/components/schemas/array-of-artifact-versions'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /artifact-versions/{artifact_version_prn}:
    get:
      operationId: retrieve-an-artifact-version
      summary: Retrieve artifact version
      tags:
        - Artifact Versions
      parameters:
        - name: artifact_version_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact_version:
                    $ref: '#/components/schemas/artifact-version'
    patch:
      operationId: update-an-artifact-version
      summary: Update an artifact version
      tags:
        - Artifact Versions
      parameters:
        - name: artifact_version_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                version:
                  $ref: '#/components/schemas/artifact-version'
                description:
                  $ref: '#/components/schemas/artifact-version-description'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  artifact_version:
                    $ref: '#/components/schemas/artifact-version'
  /binaries:
    post:
      operationId: create-a-binary
      summary: Create a binary
      description: |
        Create a binary record.
      tags:
        - Binaries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                artifact_version_prn:
                  $ref: '#/components/schemas/prn'
                description:
                  $ref: '#/components/schemas/binary-description'
                hash:
                  $ref: '#/components/schemas/binary-hash'
                size:
                  $ref: '#/components/schemas/binary-size'
                target:
                  $ref: '#/components/schemas/target-triplet'
              required:
                - artifact_version_prn
                - hash
                - size
                - target
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binary:
                    $ref: '#/components/schemas/binary'
    get:
      operationId: list-binaries
      summary: List binaries
      tags:
        - Binaries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binaries:
                    $ref: '#/components/schemas/array-of-binaries'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /binaries/{binary_prn}:
    get:
      operationId: retrieve-a-binary
      summary: Retrieve a binary
      tags:
        - Binaries
      parameters:
        - name: binary_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binary:
                    $ref: '#/components/schemas/binary'
    patch:
      operationId: update-a-binary
      summary: Update a binary
      tags:
        - Binaries
      parameters:
        - name: binary_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/binary-description'
                state:
                  $ref: '#/components/schemas/binary-state'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binary:
                    $ref: '#/components/schemas/binary'
  /binaries/{binary_prn}/parts/{index}:
    put:
      operationId: create-a-binary-part
      summary: Create a Binary Part
      description: |
        Creates a binary part, check the documentation at TODO
      tags:
        - Binaries
      parameters:
        - name: binary_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
        - name: index
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/binary-part-index'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                expected_binary_size:
                  $ref: '#/components/schemas/binary-part-size'
                hash:
                  $ref: '#/components/schemas/binary-part-hash'
                size:
                  $ref: '#/components/schemas/binary-part-size'
              required:
                - expected_binary_size
                - hash
                - size
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binary:
                    $ref: '#/components/schemas/binary-part'
  /binaries/{binary_prn}/parts:
    get:
      operationId: list-binary-parts
      summary: List binary parts
      tags:
        - Binaries
      parameters:
        - name: binary_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binaries:
                    $ref: '#/components/schemas/array-of-binary-parts'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /binary_signatures:
    post:
      operationId: create-binary-signature
      summary: Attach a signature to a binary
      tags:
        - Binaries
      description: >
        Attach a signature to a binary.


        This endpoint must be used against a binary that is already uploaded
        completely. The

        request will fail if the signature is invalid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                binary_prn:
                  $ref: '#/components/schemas/prn'
                signing_key_prn:
                  $ref: '#/components/schemas/prn'
                signature:
                  $ref: '#/components/schemas/signature'
              required:
                - binary_prn
                - signing_key_prn
                - signature
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  binary:
                    $ref: '#/components/schemas/binary-signature'
  /binary_signatures/{binary_signature_prn}:
    delete:
      operationId: delete-binary-signature
      summary: Delete Binary Signature
      tags:
        - Binaries
      parameters:
        - name: binary_signature_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '204':
          description: Ok.
  /bundles:
    post:
      operationId: create-a-bundle
      summary: Create a bundle
      tags:
        - Bundles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                organization_prn:
                  $ref: '#/components/schemas/prn'
                artifact_version_prns:
                  $ref: '#/components/schemas/array-of-artifact-version-prns'
              required:
                - artifact_version_prns
                - organization_prn
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  bundle:
                    $ref: '#/components/schemas/bundle'
    get:
      operationId: list-bundles
      summary: list Bundles
      tags:
        - Bundles
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  bundles:
                    $ref: '#/components/schemas/array-of-bundles'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /bundles/{bundle_prn}:
    get:
      operationId: retrieve-a-bundle
      summary: Retrieve a bundle
      tags:
        - Bundles
      parameters:
        - name: bundle_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  bundle:
                    $ref: '#/components/schemas/bundle'
  /cohorts:
    post:
      operationId: create-a-cohort
      summary: Create a cohort
      tags:
        - Cohorts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/cohort-description'
                name:
                  $ref: '#/components/schemas/cohort-name'
                organization_prn:
                  $ref: '#/components/schemas/prn'
                product_prn:
                  $ref: '#/components/schemas/prn'
              required:
                - name
                - organization_prn
                - product_prn
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  cohort:
                    $ref: '#/components/schemas/cohort'
    get:
      operationId: list-cohorts
      summary: list Cohorts
      tags:
        - Cohorts
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  cohorts:
                    $ref: '#/components/schemas/array-of-cohorts'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /cohorts/{cohort_prn}:
    get:
      operationId: retrieve-a-cohort
      summary: Retrieve a cohort
      tags:
        - Cohorts
      parameters:
        - name: cohort_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  cohort:
                    $ref: '#/components/schemas/cohort'
    patch:
      operationId: update-a-cohort
      summary: Update a cohort
      tags:
        - Cohorts
      parameters:
        - name: cohort_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/cohort-description'
                name:
                  $ref: '#/components/schemas/cohort-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  cohort:
                    $ref: '#/components/schemas/cohort'
  /signing_keys:
    post:
      operationId: create-a-signing-key
      summary: Create a signing key
      tags:
        - Signing Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                value:
                  $ref: '#/components/schemas/signing-key-value'
                name:
                  $ref: '#/components/schemas/signing-key-name'
                organization_prn:
                  $ref: '#/components/schemas/prn'
              required:
                - name
                - organization_prn
                - value
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  signing_key:
                    $ref: '#/components/schemas/signing-key'
    get:
      operationId: list--signing-keys
      summary: List Signing Keys
      tags:
        - Signing Keys
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  signing_keys:
                    $ref: '#/components/schemas/array-of-signing-keys'
                  next_page:
                    $ref: '#/components/schemas/next-page'
  /signing_keys/{signing_key_prn}:
    get:
      operationId: retrieve-a-signing-key
      summary: Retrieve a signing key
      tags:
        - Signing Keys
      parameters:
        - name: signing_key_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  signing_key:
                    $ref: '#/components/schemas/signing-key'
    patch:
      operationId: update-a-signing-key
      summary: Update a signing key
      tags:
        - Signing Keys
      parameters:
        - name: signing_key_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                value:
                  $ref: '#/components/schemas/signing-key-value'
                name:
                  $ref: '#/components/schemas/signing-key-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  signing_key:
                    $ref: '#/components/schemas/signing-key'
    delete:
      operationId: delete-a-signing-key
      summary: Retrieve a cohort
      tags:
        - Signing Keys
      parameters:
        - name: signing_key_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '204':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  signing_key:
                    $ref: '#/components/schemas/signing-key'
  /orgs/{organization_name}/ca_certificates:
    get:
      operationId: list-ca-certificates
      summary: list CA certificates
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-ca-certificates'
    post:
      operationId: create-a-ca-certificate
      summary: create CA certificate
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                certificate:
                  description: Base64 encoded CA certificate.
                  type: string
                verification_certificate:
                  description: >
                    Base64 encoded verification certificate.

                    See: [create verification
                    codes](#tag/CA-Certificates/paths/~1orgs~1{organization_name}~1ca_certificates~1verification_codes/post)
                  type: string
                description:
                  type: string
                jitp:
                  $ref: '#/components/schemas/ca-jitp'
              required:
                - certificate
                - verification_certificate
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ca-certificate'
  /orgs/{organization_name}/ca_certificates/{ca_certificate_serial}:
    delete:
      operationId: delete-a-ca-certificate
      summary: delete a CA certificate
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: ca_certificate_serial
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ca-certificate-serial'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-ca-certificate
      summary: retrieve a CA certificate
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: ca_certificate_serial
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ca-certificate-serial'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ca-certificate'
    put:
      operationId: update-a-ca-certificate
      summary: update CA certificate
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: ca_certificate_serial
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ca-certificate-serial'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                jitp:
                  $ref: '#/components/schemas/ca-jitp'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ca-certificate'
  /orgs/{organization_name}/ca_certificates/verification_codes:
    post:
      operationId: create-a-ca-verification-code
      summary: create CA verification code
      tags:
        - CA Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ca-verification-code'
  /orgs/{organization_name}/keys:
    get:
      operationId: list-keys
      deprecated: true
      summary: list keys
      tags:
        - Keys
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-keys'
    post:
      operationId: create-a-key
      deprecated: true
      summary: create key
      tags:
        - Keys
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  $ref: '#/components/schemas/key-key'
                name:
                  $ref: '#/components/schemas/key-name'
              required:
                - key
                - name
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/key'
  /orgs/{organization_name}/keys/{key_name}:
    delete:
      operationId: delete-a-key
      deprecated: true
      summary: delete key
      tags:
        - Keys
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: key_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/key-name'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-key
      deprecated: true
      summary: retrieve a key
      tags:
        - Keys
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: key_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/key-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/key'
  /orgs/{organization_name}/products:
    get:
      operationId: list-products
      summary: list products
      tags:
        - Products
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-products'
    post:
      operationId: create-a-product
      summary: create product
      tags:
        - Products
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/schemas/product-name'
              required:
                - name
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product'
  /orgs/{organization_name}/products/{product_name}:
    delete:
      operationId: delete-a-product
      summary: delete product
      tags:
        - Products
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-product
      summary: retrieve a product
      tags:
        - Products
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product'
    put:
      operationId: update-a-product
      summary: update a product
      tags:
        - Products
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                product:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/product-name'
              required:
                - product
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product'
  /orgs/{organization_name}/products/{product_name}/deployments:
    get:
      operationId: list-deployments
      summary: list deployments
      tags:
        - Deployments
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-deployments'
    post:
      operationId: create-a-deployment
      summary: create a deployment
      tags:
        - Deployments
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                conditions:
                  $ref: '#/components/schemas/deployment-conditions'
                  required:
                    - tags
                delta_updatable:
                  $ref: '#/components/schemas/delta-updatable'
                  default: false
                firmware:
                  $ref: '#/components/schemas/firmware-uuid'
                is_active:
                  description: Must be `false`.
                  $ref: '#/components/schemas/deployment-is-active'
                name:
                  $ref: '#/components/schemas/deployment-name'
              required:
                - conditions
                - firmware
                - is_active
                - name
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/deployment'
  /orgs/{organization_name}/products/{product_name}/deployments/{deployment_name}:
    delete:
      operationId: delete-a-deployment
      summary: delete a deployment
      tags:
        - Deployments
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: deployment_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/deployment-name'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-deployment
      summary: retrieve deployment
      tags:
        - Deployments
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: deployment_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/deployment-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/deployment'
    put:
      operationId: update-deployment
      summary: update-deployment
      tags:
        - Deployments
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: deployment_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/deployment-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                deployment:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/deployment-name'
                    conditions:
                      $ref: '#/components/schemas/deployment-conditions'
                    delta_updatable:
                      $ref: '#/components/schemas/delta-updatable'
                    firmware:
                      $ref: '#/components/schemas/firmware-uuid'
                    is_active:
                      $ref: '#/components/schemas/deployment-is-active'
              required:
                - deployment
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/deployment'
  /orgs/{organization_name}/products/{product_name}/devices:
    get:
      operationId: list-devices
      summary: list devices
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-devices'
    post:
      operationId: create-a-device
      summary: create a device
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/device-description'
                healthy:
                  $ref: '#/components/schemas/device-healthy'
                identifier:
                  $ref: '#/components/schemas/device-identifier'
                last_communication:
                  $ref: '#/components/schemas/device-last-communication'
                tags:
                  $ref: '#/components/schemas/array-of-device-tags'
                target:
                  $ref: '#/components/schemas/target-triplet'
              required:
                - identifier
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
  /orgs/{organization_name}/products/{product_name}/devices/{device_identifier}:
    delete:
      operationId: delete-a-device
      summary: delete device
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-device
      summary: retrieve a device
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/device'
    put:
      operationId: update-a-device
      summary: update a device
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/device-description'
                healthy:
                  $ref: '#/components/schemas/device-healthy'
                last_communication:
                  $ref: '#/components/schemas/device-last-communication'
                tags:
                  $ref: '#/components/schemas/array-of-device-tags'
                target:
                  $ref: '#/components/schemas/target-triplet'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/device'
  /orgs/{organization_name}/products/{product_name}/devices/{device_identifier}/certificates:
    get:
      operationId: list-device-certificates
      summary: list device certificates
      tags:
        - Device Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-device-certificates'
    post:
      operationId: create-a-device-certificate
      summary: create a device certificate
      tags:
        - Device Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                cert:
                  $ref: '#/components/schemas/device-certificate-pem-base64'
              required:
                - cert
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/device-certificate'
  /orgs/{organization_name}/products/{product_name}/devices/{device_identifier}/certificates/{certificate_serial}:
    get:
      operationId: retrieve-a-device-certificate
      summary: retrieve a device certificate
      tags:
        - Device Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
        - name: certificate_serial
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-certificate-serial'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/device-certificate'
    delete:
      operationId: delete-a-device-certificate
      summary: delete a device certificate
      tags:
        - Device Certificates
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: device_identifier
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-identifier'
        - name: certificate_serial
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/device-certificate-serial'
      responses:
        '204':
          description: Ok.
  /orgs/{organization_name}/products/{product_name}/devices/auth:
    post:
      operationId: authenticate-device
      summary: authenticate device
      tags:
        - Devices
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                certificate:
                  $ref: '#/components/schemas/device-certificate-pem-base64'
              required:
                - certificate
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/device'
  /orgs/{organization_name}/products/{product_name}/firmwares:
    get:
      operationId: list-firmware
      summary: list firmware
      tags:
        - Firmware
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-firmware'
    post:
      operationId: create-a-firmware
      summary: create a firmware
      tags:
        - Firmware
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firmware:
                  type: string
                  format: binary
                  description: >-
                    Reference [firmware file
                    requirements](/reference/firmware#firmware-file-requirements).
                ttl:
                  type: integer
              required:
                - firmware
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/firmware'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                properties:
                  errors:
                    oneOf:
                      - type: string
                        const: invalid_signature
                      - type: object
                        properties:
                          detail:
                            type: string
                            const: Internal Server Error
  /orgs/{organization_name}/products/{product_name}/firmwares/{firmware_uuid}:
    delete:
      operationId: delete-a-firmware
      summary: delete a firmware
      tags:
        - Firmware
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: firmware_uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/firmware-uuid'
      responses:
        '204':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/firmware'
    get:
      operationId: retrieve-a-firmware
      summary: retrieve a firmware
      tags:
        - Firmware
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: firmware_uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/firmware-uuid'
        - name: expand
          description: |
            See [expanding responses](#section/Expanding-Responses).

            |Field|Description|
            |-|-|
            |`url`|Includes a presigned URL for downloading the firmware.|
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/firmware'
  /orgs/{organization_name}/products/{product_name}/users:
    get:
      operationId: list-product-users
      summary: list product users
      tags:
        - Product Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-product-users'
    post:
      operationId: add-a-product-user
      summary: add a product user
      tags:
        - Product Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/role-name'
                username:
                  $ref: '#/components/schemas/user-username'
              required:
                - role
                - username
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product-user'
  /orgs/{organization_name}/products/{product_name}/users/{user_username}:
    delete:
      operationId: remove-a-product-user
      summary: remove a product user
      tags:
        - Product Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-a-product-user
      summary: retrieve a product user
      tags:
        - Product Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product-user'
    put:
      operationId: update-a-product-user
      summary: update a product user
      tags:
        - Product Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: product_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/product-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/role-name'
              required:
                - role
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/product-user'
  /orgs/{organization_name}/users:
    get:
      operationId: list-organization-users
      summary: list organization users
      tags:
        - Organization Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/array-of-organization-users'
    post:
      operationId: add-an-organization-user
      summary: add an organization user
      tags:
        - Organization Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/role-name'
                username:
                  $ref: '#/components/schemas/user-username'
              required:
                - role
                - username
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/organization-user'
  /orgs/{organization_name}/users/{user_username}:
    delete:
      operationId: remove-an-organization-user
      summary: remove an organization user
      tags:
        - Organization Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      responses:
        '204':
          description: Ok.
    get:
      operationId: retrieve-an-organization-user
      summary: retrieve an organization user
      tags:
        - Organization Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/organization-user'
    put:
      operationId: update-an-organization-user
      summary: update an organization user
      tags:
        - Organization Users
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/organization-name'
        - name: user_username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/user-username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/role-name'
              required:
                - role
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/organization-user'
  /releases:
    post:
      operationId: create-a-release
      summary: Create a release
      tags:
        - Releases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                bundle_prn:
                  $ref: '#/components/schemas/prn'
                  description: The bundle the release will distribute to devices.
                phase_value:
                  $ref: '#/components/schemas/release-phase-value'
                cohort_prn:
                  $ref: '#/components/schemas/prn'
                  description: >-
                    The cohort to create the release within, and in turn the
                    cohort it will distribute its bundle to.
                description:
                  $ref: '#/components/schemas/release-description'
                name:
                  $ref: '#/components/schemas/release-name'
                next_release_prn:
                  $ref: '#/components/schemas/prn'
                  description: >
                    If omitted, the release will be created as latest within the
                    cohort. If there is already at least one release in the
                    cohort, then the latest release in that cohort would have
                    its `next_release_prn` updated to this created release.


                    If supplied, the release will be created prior to the
                    release identified by `next_release_prn`. If you wish to
                    insert this release between two other releases, you may
                    additionally supply `previous_release_prn`.
                previous_release_prn:
                  $ref: '#/components/schemas/prn'
                  description: >
                    If omitted, `next_release_prn` will dictate where to create
                    this release within the cohort's release graph.


                    If supplied, `next_release_prn` is required to be supplied
                    as well. Together, these fields allow the caller to insert a
                    release between two other releases.
                organization_prn:
                  $ref: '#/components/schemas/prn'
                  description: The organization to create the release within.
                required:
                  $ref: '#/components/schemas/release-required'
                schedule_date:
                  $ref: '#/components/schemas/release-schedule-availability'
              required:
                - bundle_prn
                - phase_value
                - cohort_prn
                - name
                - organization_prn
                - required
                - schedule_date
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  release:
                    $ref: '#/components/schemas/release'
    get:
      operationId: list-releases
      summary: list Releases
      tags:
        - Releases
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  next_page:
                    $ref: '#/components/schemas/next-page'
                  releases:
                    $ref: '#/components/schemas/array-of-releases'
  /releases/{release_prn}:
    get:
      operationId: retrieve-a-release
      summary: Retrieve a release
      tags:
        - Releases
      parameters:
        - name: release_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  release:
                    $ref: '#/components/schemas/release'
    patch:
      operationId: update-a-release
      summary: Update a release
      tags:
        - Releases
      parameters:
        - name: release_prn
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/prn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  $ref: '#/components/schemas/release-description'
                name:
                  $ref: '#/components/schemas/release-name'
                phase_value:
                  $ref: '#/components/schemas/release-phase-value'
                required:
                  $ref: '#/components/schemas/release-required'
                schedule_date:
                  $ref: '#/components/schemas/release-schedule-availability'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  release:
                    $ref: '#/components/schemas/release'
  /users/auth:
    post:
      operationId: authenticate-a-user
      summary: authenticate a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/user-password'
                username:
                  type: string
              anyOf:
                - required:
                    - password
                    - username
                - required:
                    - email
                    - password
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/user-me'
  /users/login:
    post:
      operationId: login-a-user
      summary: login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/email'
                note:
                  type: string
                password:
                  $ref: '#/components/schemas/user-password'
                username:
                  type: string
              oneOf:
                - required:
                    - note
                    - password
                    - username
                - required:
                    - email
                    - note
                    - password
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        $ref: '#/components/schemas/email'
                      token:
                        $ref: '#/components/schemas/access-token'
                      username:
                        $ref: '#/components/schemas/user-username'
  /users/me:
    get:
      operationId: get-user-me
      summary: get user me
      tags:
        - Users
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/user-me'
  /users/register:
    post:
      operationId: register-a-user
      summary: register a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/user-password'
                username:
                  $ref: '#/components/schemas/user-username'
              required:
                - email
                - password
                - username
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/user-me'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    const: Public signups disabled. Invite required to signup.
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
      description: The header value must be `Token ACCESS_TOKEN_VALUE`.
  parameters:
    limit:
      in: query
      name: limit
      description: Specifies the max length of the returned results.
      schema:
        default: 10
        maximum: 100
        minimum: 1
        type: integer
    order:
      in: query
      name: order
      description: >-
        Controls whether the order of results is ascending or descending by
        `inserted_at`.
      schema:
        type: string
        enum:
          - asc
          - desc
    search:
      in: query
      name: search
      description: >
        A search query per the [search query
        language](#section/Search-Query-Language).


        |Key|Operators|Value|

        |-|-|-|

        |`description`|`:`, `~`|string|

        |`inserted_at`|`:`, `>`, `>=`, `<`, `<=` |date-time|

        |`name`|`:`, `~`|string|

        |`updated_at`|`:`, `>`, `>=`, `<`, `<=` |date-time|
      schema:
        type: string
    page:
      in: query
      name: page
      description: >
        A cursor for pagination across multiple pages of results. Don't include
        this parameter on

        the first call. Use the `next_page` value returned in a previous
        response to request

        subsequent results.
      schema:
        type: string
  schemas:
    access-token:
      type: string
    array-of-artifacts:
      type: array
      items:
        $ref: '#/components/schemas/artifact'
    array-of-ordered-artifact-versions:
      type: array
      items:
        $ref: '#/components/schemas/artifact-version-item'
    array-of-artifact-versions:
      type: array
      items:
        $ref: '#/components/schemas/artifact-version'
    array-of-artifact-version-prns:
      type: array
      items:
        $ref: '#/components/schemas/prn'
    array-of-binaries:
      type: array
      items:
        $ref: '#/components/schemas/binary'
    array-of-binary-parts:
      type: array
      items:
        $ref: '#/components/schemas/binary-part'
    array-of-bundles:
      type: array
      items:
        $ref: '#/components/schemas/bundle'
    array-of-ca-certificates:
      type: array
      items:
        $ref: '#/components/schemas/ca-certificate'
    array-of-ca-jitp-tags:
      type: array
      items:
        $ref: '#/components/schemas/ca-jitp-tag'
    array-of-cohorts:
      type: array
      items:
        $ref: '#/components/schemas/cohort'
    array-of-deployments:
      type: array
      items:
        $ref: '#/components/schemas/deployment'
    array-of-device-certificates:
      type: array
      items:
        $ref: '#/components/schemas/device-certificate'
    array-of-device-tags:
      type: array
      items:
        $ref: '#/components/schemas/device-tag'
    array-of-devices:
      type: array
      items:
        $ref: '#/components/schemas/device'
    array-of-firmware:
      type: array
      items:
        $ref: '#/components/schemas/firmware'
    array-of-keys:
      type: array
      items:
        $ref: '#/components/schemas/key'
    array-of-organization-users:
      type: array
      items:
        $ref: '#/components/schemas/organization-user'
    array-of-product-users:
      type: array
      items:
        $ref: '#/components/schemas/product-user'
    array-of-products:
      type: array
      items:
        $ref: '#/components/schemas/product'
    array-of-releases:
      type: array
      items:
        $ref: '#/components/schemas/release'
    array-of-signing-keys:
      type: array
      items:
        $ref: '#/components/schemas/signing-key'
    artifact:
      type: object
      properties:
        description:
          oneOf:
            - $ref: '#/components/schemas/artifact-description'
            - type: 'null'
        inserted_at:
          type: string
          format: date-time
        name:
          $ref: '#/components/schemas/artifact-name'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        updated_at:
          type: string
          format: date-time
    artifact-description:
      type: string
      minLength: 1
      maxLength: 256
    artifact-name:
      type: string
      minLength: 1
      maxLength: 128
    artifact-version-item:
      type: object
      properties:
        prn:
          $ref: '#/components/schemas/prn'
        index:
          type: integer
    artifact-version:
      type: object
      properties:
        artifact_prn:
          $ref: '#/components/schemas/prn'
        description:
          oneOf:
            - $ref: '#/components/schemas/artifact-version-description'
            - type: 'null'
        inserted_at:
          type: string
          format: date-time
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        version:
          $ref: '#/components/schemas/artifact-version-version'
        updated_at:
          type: string
          format: date-time
    artifact-version-description:
      type: string
      minLength: 1
      maxLength: 256
    artifact-version-version:
      type: string
      minLength: 5
      maxLength: 16
    binary:
      type: object
      properties:
        artifact_version_prn:
          $ref: '#/components/schemas/prn'
        description:
          oneOf:
            - $ref: '#/components/schemas/binary-description'
            - type: 'null'
        hash:
          $ref: '#/components/schemas/binary-hash'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        inserted_at:
          type: string
          format: date-time
        signatures:
          $ref: '#/components/schemas/array-of-signatures'
        size:
          $ref: '#/components/schemas/binary-size'
        state:
          $ref: '#/components/schemas/binary-state'
        target:
          $ref: '#/components/schemas/target-triplet'
        updated_at:
          type: string
          format: date-time
    binary-description:
      type: string
      minLength: 1
      maxLength: 256
    binary-hash:
      description: The expected binary md5 hash.
      type: string
    binary-size:
      description: The expected size in bytes of the binary.
      example: 1800000
      maximum: 53687091200000
      minimum: 0
      type: integer
    binary-state:
      description: The binary state
      type: string
      enum:
        - uploadable
        - hashable
        - hashing
        - signable
        - signed
        - destroyed
    binary-signature:
      type: object
      properties:
        binary_prn:
          $ref: '#/components/schemas/prn'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        signing_key_prn:
          $ref: '#/components/schemas/prn'
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    binary-part:
      type: object
      properties:
        hash:
          $ref: '#/components/schemas/binary-part-hash'
        binayr_prn:
          $ref: '#/components/schemas/prn'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        index:
          $ref: '#/components/schemas/binary-part-index'
        inserted_at:
          type: string
          format: date-time
        size:
          $ref: '#/components/schemas/binary-part-size'
        state:
          $ref: '#/components/schemas/binary-part-state'
        updated_at:
          type: string
          format: date-time
    binary-part-hash:
      description: The expected binary part md5 hash.
      type: string
    binary-part-index:
      description: The binary part index order
      type: integer
    binary-part-size:
      description: The expected size in bytes of the binary part.
      example: 1800000
      maximum: 5368709120
      minimum: 5242880
      type: integer
    binary-part-state:
      description: The binary part state
      type: string
      enum:
        - uploadable
        - invalid_size
        - invalid_hash
        - complete
    bundle:
      type: object
      properties:
        artifact_versions:
          $ref: '#/components/schemas/array-of-ordered-artifact-versions'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    target-triplet:
      type: string
      minLength: 1
      maxLength: 128
      description: >
        A target triplet string that specifies compaitibility between binaries
        and devices.
      example: arm-linux-androideabi
    ca-certificate:
      type: object
      properties:
        description:
          type: string
        not_after:
          type: string
          format: date-time
        not_before:
          type: string
          format: date-time
        serial:
          $ref: '#/components/schemas/ca-certificate-serial'
    ca-certificate-serial:
      $ref: '#/components/schemas/serial'
    ca-verification-code:
      type: object
      properties:
        verification_code:
          description: Expires in one week
          type: string
    ca-jitp:
      type: object
      properties:
        description:
          type: string
        product_name:
          type: string
        tags:
          $ref: '#/components/schemas/array-of-ca-jitp-tags'
        cohort_prn:
          $ref: '#/components/schemas/prn'
      required:
        - description
        - tags
        - product_name
    ca-jitp-tag:
      type: string
    cohort:
      type: object
      properties:
        description:
          oneOf:
            - $ref: '#/components/schemas/cohort-description'
            - type: 'null'
        name:
          $ref: '#/components/schemas/cohort-name'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        inserted_at:
          type: string
          format: date-time
        product_prn:
          $ref: '#/components/schemas/prn'
        updated_at:
          type: string
          format: date-time
    cohort-description:
      type: string
      minLength: 1
      maxLength: 256
    cohort-name:
      type: string
      minLength: 1
      maxLength: 128
    delta-updatable:
      type: boolean
    deployment:
      type: object
      properties:
        conditions:
          $ref: '#/components/schemas/deployment-conditions'
        delta_updatable:
          $ref: '#/components/schemas/delta-updatable'
        firmware_uuid:
          $ref: '#/components/schemas/firmware-uuid'
        is_active:
          $ref: '#/components/schemas/deployment-is-active'
        name:
          $ref: '#/components/schemas/deployment-name'
        state:
          $ref: '#/components/schemas/deployment-state'
    deployment-conditions:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/array-of-device-tags'
        version:
          description: >-
            Reference
            https://hexdocs.pm/elixir/Version.html#module-requirements.
          example: '== 1.0.0'
          type: string
    deployment-is-active:
      type: boolean
    deployment-name:
      type: string
    deployment-state:
      enum:
        - 'on'
        - 'off'
    signing-key:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/signing-key-value'
        inserted_at:
          type: string
          format: date-time
        name:
          $ref: '#/components/schemas/artifact-name'
        organization_prn:
          $ref: '#/components/schemas/prn'
        prn:
          $ref: '#/components/schemas/prn'
        updated_at:
          type: string
          format: date-time
    signing-key-value:
      type: string
      minLength: 1
      maxLength: 256
    signing-key-name:
      type: string
      minLength: 1
      maxLength: 128
    device:
      type: object
      properties:
        description:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/device-description'
        firmware_metadata:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/firmware-metadata'
        healthy:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/device-healthy'
        identifier:
          $ref: '#/components/schemas/device-identifier'
        last_communication:
          oneOf:
            - enum:
                - never
            - $ref: '#/components/schemas/device-last-communication'
        status:
          $ref: '#/components/schemas/device-status'
        tags:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/array-of-device-tags'
        version:
          $ref: '#/components/schemas/device-version'
    device-certificate:
      type: object
      properties:
        not_after:
          type: string
          format: date-time
        not_before:
          type: string
          format: date-time
        serial:
          $ref: '#/components/schemas/device-certificate-serial'
    device-certificate-pem-base64:
      description: Base64 encoded device certificate pem.
      type: string
    device-certificate-serial:
      $ref: '#/components/schemas/serial'
    device-description:
      type: string
    device-healthy:
      type: boolean
    device-identifier:
      description: Uniquely identifies a device within an organization.
      type: string
    device-last-communication:
      type: string
      format: date-time
    device-status:
      enum:
        - offline
        - online
        - rebooting
        - update pending
        - updating
    device-tag:
      type: string
    device-version:
      oneOf:
        - $ref: '#/components/schemas/version'
        - type: string
          const: unknown
    email:
      type: string
      format: email
    firmware:
      type: object
      properties:
        architecture:
          $ref: '#/components/schemas/product-architecture'
        author:
          $ref: '#/components/schemas/firmware-author'
        inserted_at:
          type: string
          format: date-time
        platform:
          $ref: '#/components/schemas/platform'
        product:
          $ref: '#/components/schemas/product-name'
        updated_at:
          type: string
          format: date-time
        uuid:
          $ref: '#/components/schemas/firmware-uuid'
        vcs_identifier:
          $ref: '#/components/schemas/vcs-identifier'
        version:
          $ref: '#/components/schemas/version'
    firmware-author:
      type: string
    firmware-metadata:
      type: object
      properties:
        architecture:
          $ref: '#/components/schemas/product-architecture'
        author:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/firmware-author'
        description:
          oneOf:
            - type: 'null'
            - type: string
        fwup_version:
          oneOf:
            - type: 'null'
            - type: string
          description: The version of FWUP bundled within the firmware.
        misc:
          oneOf:
            - type: 'null'
            - type: string
        platform:
          $ref: '#/components/schemas/platform'
        product:
          $ref: '#/components/schemas/product-name'
        uuid:
          $ref: '#/components/schemas/firmware-uuid'
        vcs_identifier:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/vcs-identifier'
        version:
          $ref: '#/components/schemas/version'
    firmware-uuid:
      type: string
      format: uuid
      description: Uniquely identifies a firmware.
    key:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/key-key'
        name:
          $ref: '#/components/schemas/key-name'
    key-key:
      type: string
    key-name:
      type: string
    next-page:
      type: string
    organization-name:
      type: string
    organization-user:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        role:
          $ref: '#/components/schemas/role-name'
        username:
          $ref: '#/components/schemas/user-username'
    platform:
      type: string
    prn:
      description: >
        [Peridio Resource Names](/reference/peridio-resource-names) (PRNs)
        uniquely identify Peridio resources.
      type: string
    product:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/product-name'
        prn:
          $ref: '#/components/schemas/prn'
    product-architecture:
      type: string
    product-name:
      type: string
      description: Uniquely identifies a product within an organization.
    product-user:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        role:
          $ref: '#/components/schemas/role-name'
        username:
          $ref: '#/components/schemas/user-username'
    release:
      type: object
      properties:
        bundle_prn:
          $ref: '#/components/schemas/prn'
        cohort_prn:
          $ref: '#/components/schemas/prn'
        description:
          $ref: '#/components/schemas/release-description'
        name:
          $ref: '#/components/schemas/release-name'
        next_release_prn:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/prn'
        organization_prn:
          $ref: '#/components/schemas/prn'
        phase_type:
          $ref: '#/components/schemas/release-phase-type'
        phase_value:
          $ref: '#/components/schemas/release-phase-value'
        required:
          $ref: '#/components/schemas/release-required'
        schedule_date:
          $ref: '#/components/schemas/release-schedule-availability'
        schedule_complete:
          $ref: '#/components/schemas/release-schedule-complete'
        prn:
          $ref: '#/components/schemas/prn'
        inserted_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    release-phase-value:
      description: >
        The phase value controls the distribution of the update to your fleet.


        Decimals in `[0.0, 1.0]` are treated as percents, e.g., to allow 20% of
        the cohort to update, you would specifiy `0.2`.


        Integers >= 2 are treated as absolute device counts, e.g., to allow 40
        of the cohort's devices to update, you would specifiy `40`.


        **NOTE:** `1` is a special value in that it represents `100%` and  once
        a release is updated to this value, the phase value can never be changed
        again.


        A release with a `phase_value` not equal to `1` is considered "phased".


        **NOTE:** There can only ever be a single release that is phased at a
        time within a cohort. Because of this, if there is already a phased
        release, it must be "completed" by setting the phase to `1`.
      type: number
      minimum: 0
      maximum: 100
    release-phase-type:
      type: string
      enum:
        - static
        - percent
    release-description:
      default: null
      oneOf:
        - type: string
        - type: 'null'
    release-name:
      type: string
    release-required:
      type: boolean
      description: >
        If `true`, this release must be passed through if encountered by a
        device.


        If `false`, this release will be skipped over when possible (if there
        are releases configured after it).
    release-schedule-availability:
      type: string
      format: date-time
      description: >-
        Before this date-time, the release will not be resolvable when checking
        for updates. You may use this to schedule a future release.
    release-schedule-complete:
      type: boolean
    role-name:
      enum:
        - admin
        - read
        - read
        - write
    serial:
      type: string
      example: '522154175989108335861639249273408275957749326848'
    array-of-signatures:
      default: null
      oneOf:
        - type: 'null'
        - type: array
          items:
            $ref: '#/components/schemas/signing-signature'
    signing-signature:
      type: object
      properties:
        signature:
          type: string
          description: >
            An ed25519 signature  of the SHA256 hash of the binary represented
            as a 64-byte hex

            encoded string.
        signing_key_prn:
          $ref: '#/components/schemas/prn'
    signature:
      type: string
      description: >
        An ed25519 signature  of the SHA256 hash of the binary represented as a
        64-byte hex

        encoded string.
    user-me:
      allOf:
        - type: object
          properties:
            email:
              $ref: '#/components/schemas/email'
            username:
              type: string
    user-password:
      type: string
    user-username:
      type: string
    vcs-identifier:
      example: d670460b4b4aece5915caf5c68d12f560a9fe3e4
      type: string
    version:
      description: Reference https://hexdocs.pm/elixir/Version.html#module-versions.
      example: 1.0.0-alpha.3
      type: string
