---
openapi: 3.1.0
info:
  title: Peridio API
  version: "0.1.0"
servers:
  - url: https://api.peridio.com/
    description: Production.
  - url: https://api.staging.peridio.com/
    description: Staging.
tags:
  - name: "Distribution Groups"
    description: A collection of Nodes of the same Node Type to which a target Distribution can be assigned. A Node may only belong to a single Distribution Group at a time.
  - name: "Distributions"
    description: A set of Element Type Versions. Use Distribution Groups to cause Nodes to update to Distributions.
  - name: "Elements"
    description: Binary data associated with an Element Type Version.
  - name: "Element Types"
    description: A category of Elements.
  - name: "Element Type Versions"
    description: A distinct iteration of an Element Type.
  - name: "Nodes"
    description: An entity to which Elements will be delivered.
  - name: "Node Types"
    description: A category of Nodes.
x-tagGroups:
  - name: "Core Endpoints"
    tags:
      - "Distribution Groups"
      - "Distributions"
      - "Elements"
      - "Element Types"
      - "Element Type Versions"
      - "Nodes"
      - "Node Types"
paths:
  /distribution-groups:
    post:
      summary: Create
      tags:
        - 'Distribution Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/schemas/name'
                node_type_id:
                  $ref: '#/components/schemas/node-type-id'
              required:
                - name
                - node_type_id
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distribution-group'
    get:
      summary: Retrieve
      tags:
        - 'Distribution Groups'
      parameters:
        - description: Filters by a single Distribution Group ID.
          in: query
          name: distribution_group_id
          schema:
            $ref: '#/components/schemas/distribution-group-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-distribution-groups'
        '404':
          description: Not found.
  /distribution:
    post:
      summary: Create
      tags:
        - 'Distributions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                distribution_group_id:
                  $ref: '#/components/schemas/distribution-group-id'
                element_type_version_set_id:
                  $ref: '#/components/schemas/element-type-version-set-id'
              required:
                - distribution_group_id
                - node_element_resolution_strategy_id
                - node_type_id
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distribution'
    get:
      summary: Retrieve
      tags:
        - 'Distributions'
      parameters:
        - description: Filters by a single Distribution ID.
          in: query
          name: distribution_id
          schema:
            $ref: '#/components/schemas/distribution-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-distributions'
        '404':
          description: Not found.
  /elements:
    post:
      summary: Create
      tags:
        - 'Elements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                element_type_version_id:
                  $ref: '#/components/schemas/element-type-version-id'
                element_binary:
                  type: string
                  contentEncoding: base64
                  example: bGlnaHQgd29yaw==
              required:
                - element_type_version_id
                - element_binary
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/element'
    get:
      summary: Retrieve
      tags:
        - 'Elements'
      parameters:
        - description: Filters by a single Element ID.
          in: query
          name: element_id
          schema:
            $ref: '#/components/schemas/element-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-elements'
        '404':
          description: Not found.
  /element-types:
    post:
      summary: Create
      tags:
        - 'Element Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/schemas/name'
              required:
                - name
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/element-type'
    get:
      summary: Retrieve
      tags:
        - 'Element Types'
      parameters:
        - description: Filters by a single Element Type ID.
          in: query
          name: element_type_id
          schema:
            $ref: '#/components/schemas/element-type-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-element-types'
        '404':
          description: Not found.
  /element-type-versions:
    post:
      summary: Create
      tags:
        - 'Element Type Versions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                distribution_group_id:
                  $ref: '#/components/schemas/distribution-group-id'
                distribution_id:
                  $ref: '#/components/schemas/distribution-id'
                  default: null
                  type: integer
                name:
                  $ref: '#/components/schemas/name'
                node_element_resolution_strategy_id:
                  $ref: '#/components/schemas/node-element-resolution-strategy-id'
                node_type_id:
                  $ref: '#/components/schemas/node-type-id'
              required:
                - name
                - node_type_id
              example:
                name: T-800
                node_type_id: Endoskeleton
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/element-type-version'
    get:
      summary: Retrieve
      tags:
        - 'Element Type Versions'
      parameters:
        - description: Filters by a single Element Type Version ID.
          in: query
          name: element_type_version_id
          schema:
            $ref: '#/components/schemas/element-type-version-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-element-type-versions'
        '404':
          description: Not found.
  /element-type-version-sets:
    post:
      summary: Create
      tags:
        - 'Element Type Version Sets'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                element_type_version_ids:
                  $ref: '#/components/schemas/array-of-element-type-version-ids'
                distribution_id:
                  $ref: '#/components/schemas/distribution-id'
                  default: null
                  type: integer
                name:
                  $ref: '#/components/schemas/name'
                node_element_resolution_strategy_id:
                  $ref: '#/components/schemas/node-element-resolution-strategy-id'
                node_type_id:
                  $ref: '#/components/schemas/node-type-id'
              required:
                - name
                - node_type_id
              example:
                name: T-800
                node_type_id: Endoskeleton
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/element-type-version-set'
    get:
      summary: Retrieve
      tags:
        - 'Element Type Version Sets'
      parameters:
        - description: Filters by a single Element Type Version Set ID.
          in: query
          name: element_type_version_set_id
          schema:
            $ref: '#/components/schemas/element-type-version-set-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-element-type-version-sets'
        '404':
          description: Not found.
  /nodes:
    post:
      summary: Create
      tags:
        - 'Nodes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                distribution_group_id:
                  $ref: '#/components/schemas/distribution-group-id'
                distribution_id:
                  $ref: '#/components/schemas/distribution-id'
                  default: null
                  type: integer
                name:
                  $ref: '#/components/schemas/name'
                node_element_resolution_strategy_id:
                  $ref: '#/components/schemas/node-element-resolution-strategy-id'
                node_type_id:
                  $ref: '#/components/schemas/node-type-id'
              required:
                - name
                - node_type_id
              example:
                name: T-800
                node_type_id: Endoskeleton
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node'
    get:
      summary: Retrieve
      tags:
        - 'Nodes'
      parameters:
        - description: Filters by a single Node ID.
          in: query
          name: node_id
          schema:
            $ref: '#/components/schemas/node-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-nodes'
        '404':
          description: Not found.
  /node-types:
    post:
      summary: Create
      tags:
        - 'Node Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                distribution_group_id:
                  $ref: '#/components/schemas/distribution-group-id'
                name:
                  $ref: '#/components/schemas/name'
                node_type_status_id:
                  $ref: '#/components/schemas/node-type-status-id'
              required:
                - distribution_group_id
                - name
                - node_type_status_id
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-type'
    get:
      summary: Retrieve
      tags:
        - 'Node Types'
      parameters:
        - description: Filters by a single Node Type ID.
          in: query
          name: node_type_id
          schema:
            $ref: '#/components/schemas/node-type-id'
        - description: Filters by a single Node Type Status ID.
          in: query
          name: node_type_status_id
          schema:
            $ref: '#/components/schemas/node-type-status-id'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array-of-node-types'
        '404':
          description: Not found.
components:
  schemas:
    array-of-distribution-groups:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/distribution-group'
    array-of-distributions:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/distribution'
    array-of-element-binary-statuses:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-binary-status'
    array-of-element-type-version-set-items:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-type-version-set-item'
    array-of-element-type-version-sets:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-type-version-set'
    array-of-element-type-version-ids:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-type-version-id'
    array-of-element-type-versions:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-type-version'
    array-of-element-types:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-type'
    array-of-element-uniqueness-strategies:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element-uniqueness-strategy'
    array-of-elements:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/element'
    array-of-node-element-resolution-strategies:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/node-element-resolution-strategy'
    array-of-node-type-ids:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/node-type-id'
    array-of-node-type-statuses:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/node-type-status'
    array-of-node-types:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/node-type'
    array-of-nodes:
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: '#/components/schemas/node'
    distribution-group:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            id:
              $ref: '#/components/schemas/distribution-group-id'
            name:
              type: string
              minLength: 1
              maxLength: 128
            node_type_id:
              type: string
              format: uuid
            updated_at:
              type: string
              format: date-time
    distribution-group-id:
      type: string
      format: uuid
    distribution:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            distribution_group_id:
              $ref: '#/components/schemas/distribution-group-id'
            element_type_version_set_id:
              $ref: '#/components/schemas/element-type-version-set-id'
            id:
              $ref: '#/components/schemas/distribution-id'
            updated_at:
              type: string
              format: date-time
            version:
              $ref: '#/components/schemas/version'
            version_requirement:
              $ref: '#/components/schemas/version-requirement'
    distribution-id:
      type: string
      format: uuid
    element:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            element_binary_status_id:
              $ref: '#/components/schemas/element-binary-status-id'
            element_type_version_id:
              $ref: '#/components/schemas/element-type-version-id'
            id:
              $ref: '#/components/schemas/element-id'
            updated_at:
              type: string
              format: date-time
    element-binary-status-id:
      oneOf:
        - description: Node Element Manifests that include this Element will always have their "url" field set to a presigned ECDN URL.
          const: active
          type: string
        - description: Node Element Manifests that include this Element will always have their "url" field set to null.
          const: paused
          type: string
    element-id:
      type: string
      format: uuid
    element-type:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            id:
              $ref: '#/components/schemas/element-type-version-id'
            name:
              $ref: '#/components/schemas/name'
            updated_at:
              type: string
              format: date-time
    element-type-id:
      type: string
      format: uuid
    element-type-version:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            element_type_id:
              $ref: '#/components/schemas/element-type-id'
            element_uniqueness_strategy_id:
              $ref: '#/components/schemas/element-uniqueness-strategy-id'
            id:
              $ref: '#/components/schemas/element-type-version-id'
            updated_at:
              type: string
              format: date-time
            version:
              $ref: '#/components/schemas/version'
    element-type-version-id:
      type: string
      format: uuid
    element-type-version-set:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            element_type_version_ids:
              $ref: '#/components/schemas/array-of-element-type-version-ids'
              description: |
                Ordered ascending where IDs are compared character by character using their ASCII values.
            id:
              $ref: '#/components/schemas/element-type-version-set-id'
            set_items_hash:
              $ref: '#/components/schemas/element-type-version-set-set-items-hash'
            updated_at:
              type: string
              format: date-time
    element-type-version-set-id:
      type: string
      format: uuid
    element-type-version-set-set-items-hash:
      description: |
        The SHA-256 hash of the ordered concatenation of associated Element Type Version IDs.
      type: string
      minLength: 256
      maxLength: 256
    element-uniqueness-strategy-id:
      description: At what scope will a distinct Element be managed for a particular Element Type Version.
      oneOf:
        - description: All Nodes will receive the same Element.
          const: element_type_version
          type: string
        - description: All Nodes will receive a distinct Element.
          const: node
          type: string
    name:
      type: string
      minLength: 1
      maxLength: 128
    node:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            distribution_group_id:
              $ref: '#/components/schemas/distribution-group-id'
            distribution_id:
              $ref: '#/components/schemas/distribution-id'
            id:
              $ref: '#/components/schemas/node-id'
            node_element_resolution_strategy_id:
              $ref: '#/components/schemas/node-element-resolution-strategy-id'
            node_type_id:
              $ref: '#/components/schemas/node-type-id'
            name:
              $ref: '#/components/schemas/name'
            updated_at:
              type: string
              format: date-time
    node-element-resolution-strategy:
      allOf:
        - $ref: '#/components/schemas/description'
        - $ref: '#/components/schemas/node-element-resolution-strategy-id'
    node-element-resolution-strategy-id:
      description: The approach to Element Resolution a Node should take.
      oneOf:
        - description: Use Distribution Groups. By default the Node Types, but this may be overridden by setting the `distribution_group_id` field on the relevant Node.
          const: distribution_group
          type: string
        - description: Use the relevant Node's configured Distribution regardless of version conditions.
          const: manual
          type: string
        - description: Node Element Manifests for the relevant Node will always have their "url" field set to null.
          const: paused
          type: string
    node-id:
      type: string
      format: uuid
    node-type:
      allOf:
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
            distribution_group_id:
              $ref: '#/components/schemas/distribution-group-id'
            id:
              $ref: '#/components/schemas/node-type-id'
            name:
              $ref: '#/components/schemas/name'
            node_type_status_id:
              $ref: '#/components/schemas/node-type-status-id'
            updated_at:
              type: string
              format: date-time
    node-type-id:
      type: string
      format: uuid
    node-type-status-id:
      description: The approach to Element Resolution a Node should take.
      oneOf:
        - description: Node Element Manifests for Nodes of this Node Type will always have their `url` field set to a presigned ECDN URL.
          const: active
          type: string
        - description: Node Element Manifests for Nodes of this Node Type will always have their `url` field set to `null`.
          const: paused
          type: string
    version:
      description: |
        A [SemVer](https://semver.org/) string that matches [the suggested RegEx](https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string).
      type: string
      format: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    version-requirement:
      description: |
        A [SemVer](https://semver.org/) string that matches [the suggested RegEx](https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string). The lowest version another Distribution can be and still be able to resolve this Distribution.
      type: string
      format: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
